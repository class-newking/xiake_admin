<template>
  <div class="app-container">
    <el-card>
      <template #header>
        <div class="card-header">
          <span>{{ model_name }}表单</span>
        </div>
      </template>

      <el-form
        ref="formRef"
        :model="formData"
        :rules="rules"
        label-width="120px"
      >
{% for field in fields %}
        <el-form-item label="{{ field.verbose_name|default:field.name }}" prop="{{ field.name }}">
{% if field.get_internal_type == "BooleanField" %}
          <el-switch v-model="formData.{{ field.name }}" />
{% elif field.get_internal_type == "TextField" %}
          <el-input v-model="formData.{{ field.name }}" type="textarea" />
{% elif field.get_internal_type == "DateTimeField" %}
          <el-date-picker
            v-model="formData.{{ field.name }}"
            type="datetime"
            placeholder="选择日期时间"
            format="YYYY-MM-DD HH:mm:ss"
          />
{% elif field.get_internal_type == "DateField" %}
          <el-date-picker
            v-model="formData.{{ field.name }}"
            type="date"
            placeholder="选择日期"
            format="YYYY-MM-DD"
          />
{% else %}
          <el-input v-model="formData.{{ field.name }}" />
{% endif %}
        </el-form-item>
{% endfor %}
        <el-form-item>
          <el-button type="primary" @click="submitForm">保存</el-button>
          <el-button @click="resetForm">重置</el-button>
          <el-button @click="goBack">返回</el-button>
        </el-form-item>
      </el-form>
    </el-card>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import api from '@/utils/api'

const route = useRoute()
const router = useRouter()
const formRef = ref()

const formData = reactive({
{% for field in fields %}
  {{ field.name }}: {% if field.get_internal_type == "BooleanField" %}false{% elif field.get_internal_type in "IntegerField,FloatField" %}0{% else %}''{% endif %},
{% endfor %}
})

const rules = {
{% for field in fields %}
  {{ field.name }}: [
    { required: {% if not field.blank %}true{% else %}false{% endif %}, message: '请输入{{ field.verbose_name|default:field.name }}', trigger: 'blur' }
  ],
{% endfor %}
}

// 获取详情
const fetchDetail = async (id) => {
  try {
    const res = await api.get(`/api/{{ model_name|lower }}/${id}/`)
    Object.assign(formData, res.data)
  } catch (err) {
    ElMessage.error('获取详情失败')
  }
}

// 提交表单
const submitForm = async () => {
  if (!formRef.value) return
  
  await formRef.value.validate(async (valid) => {
    if (valid) {
      try {
        if (route.params.id) {
          // 更新
          await api.put(`/api/{{ model_name|lower }}/${route.params.id}/`, formData)
          ElMessage.success('更新成功')
        } else {
          // 创建
          await api.post('/api/{{ model_name|lower }}/', formData)
          ElMessage.success('创建成功')
        }
        goBack()
      } catch (err) {
        ElMessage.error('操作失败')
      }
    }
  })
}

// 重置表单
const resetForm = () => {
  formRef.value.resetFields()
}

// 返回
const goBack = () => {
  router.go(-1)
}

onMounted(() => {
  if (route.params.id) {
    fetchDetail(route.params.id)
  }
})
</script>

<style scoped>
.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
</style>